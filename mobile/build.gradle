plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

android {
    compileSdk versions.compileSdk

    defaultConfig {
        applicationId "org.hzontal.tellaFOSS"
        minSdkVersion versions.minSdk
        compileSdkVersion versions.compileSdk
        targetSdkVersion versions.targetSdk
        versionCode 186
        versionName "2.11.0"
        multiDexEnabled true
        aaptOptions {
            cruncherEnabled = false
            useNewCruncher = false
            noCompress 'png'
        }
        vectorDrawables.generatedDensities = []
        // vectorDrawables.useSupportLibrary = true // don't care about apk size, care about crashes

        dependenciesInfo {
            // Disables dependency metadata when building APKs.
            includeInApk = false
            // Disables dependency metadata when building Android App Bundles.
            includeInBundle = false
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            crunchPngs false
        }
        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            crunchPngs false
        }

    }

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled = true

        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }

// Apply JVM toolchain to enforce Java 17 for Kotlin
    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(17))
        }
    }

    buildFeatures {
        viewBinding = true
    }
    lintOptions {
        checkReleaseBuilds false
    }
    hilt {
        enableExperimentalClasspathAggregation = true
        enableAggregatingTask = true
    }
    packagingOptions {
        exclude 'META-INF/services/java.time.zone.ZoneRulesProvider'
        exclude 'META-INF/*.version'
        exclude 'META-INF/*.properties'
        exclude 'META-INF/*.kotlin_module'
        exclude 'META-INF/*.sf'
        exclude 'META-INF/*.rsa'
        exclude 'META-INF/*.mf'
        exclude 'META-INF/services/*'
    }
    namespace 'rs.readahead.washington.mobile'
}

dependencies {
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$versions.desugar"
    implementation "androidx.multidex:multidex:$versions.multidex"
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':tella-vault')
    implementation project(':pdfviewer')

    api project(':tella-locking-ui')

    implementation "androidx.lifecycle:lifecycle-extensions:$versions.lifecycleExtensions"
    api "androidx.navigation:navigation-fragment-ktx:$versions.navigationFragmentKtx"
    api "androidx.navigation:navigation-ui-ktx:$versions.navigationUI"
    implementation "androidx.appcompat:appcompat:$versions.appcompat"
    implementation "androidx.cardview:cardview:$versions.cardview"
    implementation "androidx.legacy:legacy-support-v4:$versions.legacyV4"
    implementation "androidx.exifinterface:exifinterface:$versions.exifinterface"

    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${versions.retrofit}"
    implementation "com.squareup.retrofit2:converter-gson:${versions.retrofit}"
    implementation("com.squareup.retrofit2:converter-simplexml:${versions.retrofit}") {
        exclude group: 'xpp3', module: 'xpp3'
        exclude group: 'stax', module: 'stax-api'
        exclude group: 'stax', module: 'stax'
    }
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$versions.retrofit2KotliCoroutinesAdapter"

    apply plugin: 'kotlin-kapt'
    implementation("com.github.permissions-dispatcher:permissionsdispatcher:$versions.permissionDispatcher") {
        exclude module: "support-v13"
    }
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$versions.kotlin"
    implementation "androidx.navigation:navigation-runtime-ktx:$versions.navigationRuntime"
    implementation "androidx.navigation:navigation-fragment-ktx:$versions.navigationFragment"
    implementation "androidx.databinding:databinding-runtime:$versions.databindingRuntime"

    implementation 'org.osmdroid:osmdroid-android:6.1.20'

    implementation "androidx.camera:camera-core:$versions.camerax"
    implementation "androidx.camera:camera-camera2:$versions.camerax"
    implementation "androidx.camera:camera-video:$versions.camerax"
    implementation "androidx.camera:camera-extensions:$versions.camerax"
    implementation "androidx.camera:camera-lifecycle:$versions.camerax"
    implementation "androidx.camera:camera-view:$versions.camerax"

    implementation "com.squareup.okhttp3:logging-interceptor:$versions.okhttp3LoggingInterceptor"
    implementation "com.squareup:tape:$versions.squareupTape"
    // todo: follow this, v2 should be soon
    implementation "com.jakewharton.timber:timber:$versions.timber"
//sqlite dependency
    implementation "net.zetetic:sqlcipher-android:$versions.sqlcipher"
    implementation "androidx.sqlite:sqlite-ktx:$versions.sqlite"

    implementation "info.guardianproject.cacheword:cachewordlib:$versions.cacheword"
    implementation "com.github.bumptech.glide:glide:$versions.glide"
    implementation "io.reactivex.rxjava2:rxandroid:$versions.rxandroid"
    implementation "com.jakewharton.rxrelay2:rxrelay:$versions.rxrelay"

// digest auth
    implementation "io.github.rburgst:okhttp-digest:$versions.burgstallerOkhttpDigest"

// collect
//implementation group: "org.getodk", name: "javarosa", version: "$versions.javarosa"
    implementation "org.opendatakit:opendatakit-javarosa:$versions.javarosa"
    implementation "net.sf.kxml:kxml2:$versions.kxml2"
    implementation "commons-io:commons-io:$versions.commonsIo"
// exo
    implementation "com.google.android.exoplayer:exoplayer:$versions.exoplayer"

// camera
    /*   implementation("com.otaliastudios:cameraview:$versions.cameraview") {
           exclude module: "exifinterface"
           exclude module: "animated-vector-drawble"
       }*/

//hilt
    implementation "com.google.dagger:hilt-android:$versions.hilt_android"
    kapt "com.google.dagger:hilt-android-compiler:$versions.hilt_android_compiler"
//hilt-view-model
    // implementation "androidx.hilt:hilt-lifecycle-viewmodel:$versions.hilt_viewmodel"
    kapt "androidx.hilt:hilt-compiler:$versions.hilt_version"
    //kapt "org.jetbrains.kotlinx:kotlinx-metadata-jvm:0.6.0"

    implementation "com.github.nak5ive:ink-android:$versions.simplifyInk"
    implementation "com.mikhaellopez:circularimageview:$versions.circularimageview"
    implementation "org.apache.directory.studio:org.apache.commons.io:$versions.apacheCommonsIo"
    implementation "com.github.ihsanbal:LoggingInterceptor:$versions.ihsanbalLoggingInterceptor"
    //worker manager
    implementation "androidx.work:work-runtime-ktx:$versions.workermanger"
    implementation("androidx.hilt:hilt-work:$versions.hilt_version")

    //optional - RxJava2 support
    implementation "androidx.work:work-rxjava2:$versions.workermanger"
    // debugImplementation "com.squareup.leakcanary:leakcanary-android:$versions.leakCanaryVersion"
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation 'org.mockito:mockito-core:3.12.4'

    testImplementation "junit:junit:$versions.junit"

    implementation("com.vanniktech:android-image-cropper:4.3.3")
}

kapt {
    correctErrorTypes true
}

import com.android.tools.profgen.ArtProfileKt
import com.android.tools.profgen.ArtProfileSerializer
import com.android.tools.profgen.DexFile

project.afterEvaluate {
    tasks.each { task ->
        if (task.name.startsWith("compile") && task.name.endsWith("ReleaseArtProfile")) {
            task.doLast {
                outputs.files.each { file ->
                    if (file.name.endsWith(".profm")) {
                        println("Sorting ${file} ...")
                        def version = ArtProfileSerializer.values().last()
                        def profile = ArtProfileKt.ArtProfile(file)
                        def keys = new ArrayList(profile.profileData.keySet())
                        def sortedData = new LinkedHashMap()
                        Collections.sort keys, new DexFile.Companion()
                        keys.each { key -> sortedData[key] = profile.profileData[key] }
                        new FileOutputStream(file).with {
                            write(version.magicBytes$profgen)
                            write(version.versionBytes$profgen)
                            version.write$profgen(it, sortedData, "")
                        }
                    }
                }
            }
        }
    }
}